# List of stages for jobs, and their order of executionstages:            - compile 
  - oss  - build  - deploy# some variablesvariables:  DOCKER_TLS_CERTDIR: "/certs"  DOCKER_REGISTRY_PREFIX: "harbor.dobest.com"  APP_NAME: ${CI_PROJECT_NAME}  OSS_PROJECT: "10th-yjcmndzb"  APP_DIST_PATH: "dist"  GIT_CLEAN_FLAGS: -ffdx -e node_modules/ -e yarn.lock  GIT_DEPTH: 1# 只有有编译阶段的才回有缓存的优化，简单发布模式不能有缓存否则不生效 cache: 
  paths: 
    - ${APP_DIST_PATH} 
    - yarn.lock# 简单发布模式中间部分要去掉！！# compile state.compile:  stage: compile  image: node:18.12.0-alpine3.15  artifacts:    when: on_success    paths:    - dist/    expire_in: 1 hour  tags:  - "base-runner-docker"# 测试环境compile-test:  extends: .compile  script:    - yarn install --registry=https://registry.npmmirror.com     - yarn run build-test   only:    - test# 正式环境compile-prod:  extends: .compile  script:    - yarn install --registry=https://registry.npmmirror.com      - yarn run build   only:    - tags# oss state.oss:  stage: oss  image: harbor.dobest.com/cicd/fed-oss  script:    - echo ${bucket}    - rm -rf .git    - ossutil64 -c /root/oss/${bucket}-config cp -r ./dist/ oss://${bucket}/ -u --output-dir=/ossutil_output/ --exclude "*.js" --exclude ".git*" --exclude "README.md" --exclude "*.html"    - ossutil64 -c /root/oss/${bucket}-config cp -r -u --meta "Content-Type:application/javascript" ./dist/ oss://${bucket}/ --output-dir=/ossutil_output/ --include "*.js"    - find dist/* -not -name '*.html' |xargs rm -rf    - find dist/*  tags:    - oss# oss prodoss-online:  stage: oss  extends: .oss  variables:    bucket: ${OSS_PROJECT}  only:  - tags# build state.build-op:  stage: build  image: harbor.dobest.com/base/docker:19.03.12-v1  script:  - ls -al  - echo "Image name:" ${DOCKER_IMAGE_NAME}  - docker build -t ${DOCKER_IMAGE_NAME} .  - docker push ${DOCKER_IMAGE_NAME}  tags:  - "base-runner-docker"# 测试环境 buildbuild-test: extends: .build-op dependencies: 
 - compile-test variables:   DOCKER_IMAGE_NAME:  ${DOCKER_REGISTRY_PREFIX}/${CI_PROJECT_PATH}:${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA} only: - test# 正式环境 buildbuild-prod: extends: .build-op dependencies: 
 - compile-prod variables:   DOCKER_IMAGE_NAME:  ${DOCKER_REGISTRY_PREFIX}/${CI_PROJECT_PATH}:${CI_COMMIT_TAG} only: - tags# deploy state.deploy-op:  stage: deploy  image:  harbor.dobest.com/cicd/kubectl-1.0  script:  - echo ${DOCKER_IMAGE_NAME}  - echo "Image name:" ${DOCKER_IMAGE_NAME}  - echo ${APP_NAME}  - echo ${CI_COMMIT_TAG}  - sed -i "s~__NAMESPACE__~${NAMESPACE}~g" deployment.yml service.yml ingress.yml  - sed -i "s~__APP_NAME__~${APP_NAME}~g" deployment.yml service.yml ingress.yml  - sed -i "s~__PROJECT_NAME__~${CI_PROJECT_NAME}~g" deployment.yml  - sed -i "s~__PROJECT_NAMESPACE__~${CI_PROJECT_NAMESPACE}~g" deployment.yml  - sed -i "s~__GROUP_NAME__~${GROUP_NAME}~g" deployment.yml  - sed -i "s~__VERSION__~${VERSION}~g" deployment.yml  - sed -i "s~__REPLICAS__~${REPLICAS}~g" deployment.yml  - sed -i "s~__HOST__~${HOST}~g" ingress.yml  - sed -i "s~__TYPE__~${TYPE}~g" service.yml  - cat deployment.yml  - kubectl apply -f deployment.yml  - kubectl apply -f service.yml  - kubectl apply -f ingress.yml  - kubectl rollout status -f deployment.yml  - kubectl get all,ing -l app=${APP_NAME} -n $NAMESPACE# deploy testdeploy-test:  variables:    REPLICAS: 1    DOCKER_IMAGE_NAME:  ${DOCKER_REGISTRY_PREFIX}/${CI_PROJECT_PATH}:${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}    NAMESPACE: "fe"    VERSION: ${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}    HOST: "testyjcmndzb2024.sanguosha.com"    TYPE: "ClusterIP"  extends: .deploy-op  tags:  - ggzc-cd-test  only:  - test# deploy proddeploy-prod:  variables:    REPLICAS: 5    DOCKER_IMAGE_NAME:  ${DOCKER_REGISTRY_PREFIX}/${CI_PROJECT_PATH}:${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}    NAMESPACE: "fe"    VERSION: ${CI_COMMIT_TAG}    HOST: "yjcmndzb2024.sanguosha.com"    TYPE: "ClusterIP"  extends: .deploy-op  before_script:    - |      # Function to check if a domain is using a CDN      check_cdn() {          DOMAIN=$1          # Use host to get the DNS records          HOST_RESULT=$(host -t cname ${DOMAIN} | awk '{print $NF}')          echo "$HOST_RESULT" | grep $DOMAIN          if [ $? -eq 0 ]; then              return 0          else              return 1          fi      }      # Use the check_cdn function to validate if the HOST is using CDN      if check_cdn ${HOST}; then          echo "CDN check passed. Proceeding with deployment."          # (Your deployment commands here, e.g., kubectl apply, etc.)      else          echo "CDN check failed. Aborting deployment."          exit 1      fi  tags:  - ggzc-fe-cd  only:  - tags